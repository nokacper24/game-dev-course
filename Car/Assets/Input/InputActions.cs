//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""afd8d52f-e06d-4928-a69f-581321cec8fa"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""952af157-68fd-434b-b45c-65e430bfcf28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""874d789f-e4e8-4b07-86f1-633ed4aeabfd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c75688c4-f674-4bd2-a2cf-aab45092881a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""36a65d3c-1f9c-4cb0-ac24-3ccc8e62a753"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3bb26aa9-c0ab-4f6a-a759-be2c8e4a30bf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c02bf130-bf98-41f4-9f81-823185cadc3b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CameraControls"",
            ""id"": ""22d4dace-c98f-44ed-b482-05fef28532a7"",
            ""actions"": [
                {
                    ""name"": ""SwitchCameraOrtographic"",
                    ""type"": ""Button"",
                    ""id"": ""6c27ffd9-4716-47a5-9ee7-6e934caf2102"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FovUp"",
                    ""type"": ""Button"",
                    ""id"": ""f7dda884-bbed-42fe-b42a-23e0e9e7e8f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FovDown"",
                    ""type"": ""Button"",
                    ""id"": ""1c7310c9-bc51-4fc6-b6eb-34c5b2b9d5a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchCameraPerspective"",
                    ""type"": ""Button"",
                    ""id"": ""6d37c50d-82c1-4a82-a0d0-cbe271991a66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""573d04fd-d473-4a02-9995-9d92e8250874"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCameraOrtographic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65c1bdab-3de4-43c2-a6bb-3120956ce2a8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FovUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb6d2525-baea-4a24-81a5-cdd209cde6a7"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCameraPerspective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dcba8ac-b9e5-4697-911e-8a0c52ec7895"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FovDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        // CameraControls
        m_CameraControls = asset.FindActionMap("CameraControls", throwIfNotFound: true);
        m_CameraControls_SwitchCameraOrtographic = m_CameraControls.FindAction("SwitchCameraOrtographic", throwIfNotFound: true);
        m_CameraControls_FovUp = m_CameraControls.FindAction("FovUp", throwIfNotFound: true);
        m_CameraControls_FovDown = m_CameraControls.FindAction("FovDown", throwIfNotFound: true);
        m_CameraControls_SwitchCameraPerspective = m_CameraControls.FindAction("SwitchCameraPerspective", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // CameraControls
    private readonly InputActionMap m_CameraControls;
    private List<ICameraControlsActions> m_CameraControlsActionsCallbackInterfaces = new List<ICameraControlsActions>();
    private readonly InputAction m_CameraControls_SwitchCameraOrtographic;
    private readonly InputAction m_CameraControls_FovUp;
    private readonly InputAction m_CameraControls_FovDown;
    private readonly InputAction m_CameraControls_SwitchCameraPerspective;
    public struct CameraControlsActions
    {
        private @InputActions m_Wrapper;
        public CameraControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchCameraOrtographic => m_Wrapper.m_CameraControls_SwitchCameraOrtographic;
        public InputAction @FovUp => m_Wrapper.m_CameraControls_FovUp;
        public InputAction @FovDown => m_Wrapper.m_CameraControls_FovDown;
        public InputAction @SwitchCameraPerspective => m_Wrapper.m_CameraControls_SwitchCameraPerspective;
        public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Add(instance);
            @SwitchCameraOrtographic.started += instance.OnSwitchCameraOrtographic;
            @SwitchCameraOrtographic.performed += instance.OnSwitchCameraOrtographic;
            @SwitchCameraOrtographic.canceled += instance.OnSwitchCameraOrtographic;
            @FovUp.started += instance.OnFovUp;
            @FovUp.performed += instance.OnFovUp;
            @FovUp.canceled += instance.OnFovUp;
            @FovDown.started += instance.OnFovDown;
            @FovDown.performed += instance.OnFovDown;
            @FovDown.canceled += instance.OnFovDown;
            @SwitchCameraPerspective.started += instance.OnSwitchCameraPerspective;
            @SwitchCameraPerspective.performed += instance.OnSwitchCameraPerspective;
            @SwitchCameraPerspective.canceled += instance.OnSwitchCameraPerspective;
        }

        private void UnregisterCallbacks(ICameraControlsActions instance)
        {
            @SwitchCameraOrtographic.started -= instance.OnSwitchCameraOrtographic;
            @SwitchCameraOrtographic.performed -= instance.OnSwitchCameraOrtographic;
            @SwitchCameraOrtographic.canceled -= instance.OnSwitchCameraOrtographic;
            @FovUp.started -= instance.OnFovUp;
            @FovUp.performed -= instance.OnFovUp;
            @FovUp.canceled -= instance.OnFovUp;
            @FovDown.started -= instance.OnFovDown;
            @FovDown.performed -= instance.OnFovDown;
            @FovDown.canceled -= instance.OnFovDown;
            @SwitchCameraPerspective.started -= instance.OnSwitchCameraPerspective;
            @SwitchCameraPerspective.performed -= instance.OnSwitchCameraPerspective;
            @SwitchCameraPerspective.canceled -= instance.OnSwitchCameraPerspective;
        }

        public void RemoveCallbacks(ICameraControlsActions instance)
        {
            if (m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlsActions @CameraControls => new CameraControlsActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface ICameraControlsActions
    {
        void OnSwitchCameraOrtographic(InputAction.CallbackContext context);
        void OnFovUp(InputAction.CallbackContext context);
        void OnFovDown(InputAction.CallbackContext context);
        void OnSwitchCameraPerspective(InputAction.CallbackContext context);
    }
}
